use std::{
    collections::HashMap,
    fs::{self, OpenOptions},
    io::Write,
    path::PathBuf,
    sync::Arc,
};

use anyhow::Result;

use crate::VERSION;

use super::version::Version;

pub struct Ini {
    name: Box<str>,
    authors: Box<str>,
    overrides: Vec<IniSegment>,
    resources: Vec<IniSegment>,
}

pub struct IniSegment {
    header: Arc<str>,
    fields: HashMap<Box<str>, Box<str>>,
}

impl Ini {

    pub fn new(name: &str, authors: String) -> Self {
        Self {
            name: name.into(),
            authors: authors.as_str().into(),
            overrides: vec![],
            resources: vec![],
        }
    }
    pub fn add_override(mut self, seg: IniSegment) -> Self {
        self.overrides.push(seg);
        self
    }
    pub fn add_resource(mut self, seg: IniSegment) -> Self {
        self.resources.push(seg);
        self
    }
    pub fn export(&self, file_path: &PathBuf) -> Result<()> {
        fs::create_dir_all(&file_path.parent().unwrap())?;
        let mut file = OpenOptions::new()
            .write(true)
            .create(true)
            .open(&file_path)?;
        writeln!(file, "; Mod Name: {:}", self.name)?;
        writeln!(file, "; Authors {:}", self.authors)?;

        writeln!(file, "; Overrides---------------------------------",)?;
        for ini_override in &self.overrides {
            writeln!(file, "[{:}]", ini_override.header)?;
            for field in &ini_override.fields {
                writeln!(file, "{:}={:}", field.0, field.1)?;
            }
            writeln!(file, "")?;
        }

        writeln!(file, "; Resources---------------------------------",)?;
        for ini_resources in &self.resources {
            writeln!(file, "[{:}]", ini_resources.header)?;
            for field in &ini_resources.fields {
                writeln!(file, "{:}={:}", field.0, field.1)?;
            }
            writeln!(file, "")?;
        }
        writeln!(
            file,
            "; .ini generated by GBT (GIMI Build Tool) Version:{}",
            Version::new(VERSION.version[0], VERSION.version[1], VERSION.version[2])
        )?;
        writeln!(file, "; If you have any issues or find any bugs, please open a issue at https://github.com/Flamindemigod/AGMG-Tools/issues or contact @Flamindemigod on discord")?;
        Ok(())
    }
}

impl IniSegment {
    pub fn new(header: &str) -> Self {
        Self {
            header: header.into(),
            fields: HashMap::new(),
        }
    }

    pub fn add_field(mut self, key: &str, value: &str) -> Self {
        self.fields.insert(key.into(), value.into());
        self
    }
}
