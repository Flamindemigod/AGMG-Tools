use anyhow::Error;
use log::{info, trace, error};
use serde::{Deserialize, Serialize};
use std::{
    collections::{HashMap, HashSet},
    fs::File,
    io::{Read, Write},
    path::PathBuf,
    sync::Arc, str::FromStr,
};

#[derive(Serialize, Deserialize, Hash, PartialEq, Eq, Debug, Clone)]
pub enum ProjectType {
    Model,
    Texture,
    Shader,
}

impl FromStr for ProjectType {
    type Err = ();
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "3D Model" => Ok(ProjectType::Model),
             "Texture"=> Ok(ProjectType::Texture),
              "Shader" => Ok(ProjectType::Shader),
              _ => Err(()),
        }
    }
}


#[derive(Serialize, Deserialize, PartialEq, Debug, Default, Clone)]
pub struct Config {
    // Based on User Input
    pub project_name: String,
    pub authors:   HashSet<Arc<str>>,
    pub migoto_path: Option<PathBuf>,
    pub project_type: HashSet<ProjectType>,

    // Generated By Scaffold
    pub textures: HashMap<String, Arc<[PathBuf]>>,
    // Key -> Target
    // Value -> Source
    pub scripts: HashMap<String, String>,
}

impl Config {
    pub fn load_project_conf(&mut self) {
        trace!("Attempting to Load Config");
        let mut reader = File::open("./Config.yml").expect("Failed to Open Config File");
        let mut buf = String::new();
        reader
            .read_to_string(&mut buf)
            .expect("Failed to Read File");
        self.clone_from(&serde_yaml::from_str(&buf).expect("Failed to Parse Config"));
        info!("Config Successfully Loaded");
    }

    pub fn save_project_conf(&self) {
        trace!("Attempting to Save Config");
        let mut writter = File::create("./Config.yml").expect("Failed to Open Config File");
        let _ = writter.write_all(
            serde_yaml::to_string(&self)
                .expect("Failed to Convert Config to String")
                .as_bytes(),
        ).map_err(|e| error!("Failed to Write Config: {:}", e));
        info!("Config Successfully Saved");
    
    }
}

pub fn does_config_exist() -> bool {
    trace!("Checking if Config Exists in Current Directory");
    let path = PathBuf::from("./Config.yml");
    if path.exists() {
        trace!("Config found");
        return true;
    }
    trace!("Config not found");
    return false;
}
